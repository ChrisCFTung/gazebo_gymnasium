<launch>
    <!-- Turn on Gazebo-->
    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="extra_gazebo_args" default=""/>
    <arg name="gui" default="true"/>
    <arg name="recording" default="false"/>
    <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
        rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
        launch files, but it does nothing. -->
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="physics" default="ode"/>
    <arg name="verbose" default="false"/>
    <!-- Change the line below for a different world-->
    <arg name="world_name" default="empty.world"/>
    <arg name="respawn_gazebo" default="true"/>
    <arg name="use_clock_frequency" default="false"/>
    <arg name="pub_clock_frequency" default="1000"/>

    <!-- set use_sim_time flag -->
    <param name="/use_sim_time" value="$(arg use_sim_time)"/>

    <!-- set command arguments -->
    <arg unless="$(arg paused)" name="command_arg1" value=""/>
    <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
    <arg unless="$(arg recording)" name="command_arg2" value=""/>
    <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
    <arg unless="$(arg verbose)" name="command_arg3" value=""/>
    <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
    <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
    <arg     if="$(arg debug)" name="script_type" value="debug"/>

    <!-- start gazebo server-->
    <group if="$(arg use_clock_frequency)">
    <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
    </group>
    <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
    args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />

    <!-- start gazebo client -->
    <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
    </group>

    
    <!-- robot -->
    <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
    <param name="robot_description" command="$(find xacro)/xacro '$(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro'" />
    <arg name="x" default="-1.0" />
    <arg name="y" default="1.0" />
    <arg name="z" default="0.2" />
    <arg name="roll" default="0.0"/>
    <arg name="pitch" default="0.0"/>
    <arg name="yaw" default="0.0"/>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" 
    args="-urdf -model robot -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -param robot_description" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <!-- Navigation -->
    <arg name="map_file" default="$(find turtlebot3_navigation)/maps/map.yaml"/>
    <arg name="move_forward_only" default="false"/>
    
    <!-- Map server -->
    <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)"/>

    <!-- AMCL -->
    <include file="$(find turtlebot3_navigation)/launch/amcl.launch">
        <arg name="initial_pose_x" value="$(arg x)"/>
        <arg name="initial_pose_y" value="$(arg y)"/>
        <arg name="initial_pose_a" value="$(arg yaw)"/>
    </include>

    <!-- move_base -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
      <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
      <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_vo.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_vo.yaml" command="load" ns="local_costmap" />
      <!-- <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" /> -->
      <!-- <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" /> -->
      <rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params_vo.yaml" command="load" />
      <rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params_plugin.yaml" command="load" />
      <rosparam file="$(find turtlebot3_navigation)/param/move_base_params.yaml" command="load" />
      <rosparam file="$(find turtlebot3_navigation)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />
      <remap from="cmd_vel" to="cmd_vel"/>
      <remap from="odom" to="odom"/>
      <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />
    </node>

    <node pkg="temi_vo" type="rgbd_to_vo.py" name="rgbd_to_VO">
      <param name="rgbd_frame" value="camera_rgb_frame"/>
      <param name="distance_scale" type="double" value="5000.0"/>
    </node>

    <!-- Some node for steering the pedestrians-->
    <node pkg="global_planner" type="planner" name="actor_path_plan">
      <param name="outline_map" value="false"/>
      <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_vo.yaml" command="load" ns="costmap" />
      <rosparam file="$(find turtlebot3_navigation)/param/actor_costmap_params.yaml" command="load" />
    </node>

    <node pkg="gazebo_ros_actor_plugin" type="actor_path.py" name="actor_path"/>

    <!-- rviz -->
    <node pkg="rviz" type="rviz" name="rviz" required="true"
            args="-d $(find turtlebot3_navigation)/rviz/turtlebot3_navigation.rviz"/>

</launch>